#!/bin/sh

# Copyright (c) 2019 Purism SPC

PUBKEY=$1
TMPDIR=`mktemp --tmpdir=/dev/shm --directory`
TMPKEY="${TMPDIR}/tmpkey"
GNUPGHOME="${TMPDIR}"
CRYPTHOME="/etc/cryptsetup-initramfs"
ROOT_DEV=""
ROOT_DEV_FULL=""

. /lib/cryptsetup/functions

if [ ! -e "$PUBKEY" ]; then
  echo "ERROR: This script requires a GPG public key to encrypt your LUKS secret against"
  echo "Usage: $0 <gpg_public_key.asc>"
  exit 1
fi

# Discover the root LUKS device
#ROOT_LUKS=`grep -v '^#' /etc/fstab | col | egrep '[[:space:]]+\/[[:space:]]+' | cut -f1 -d ' '| sed 's/\/dev\/mapper\///'`
#case $ROOT_LUKS in
#UUID=*)
#  UUID=`echo $ROOT_LUKS | cut -f2 -d '='`
#  ROOT_LUKS=`blkid -U $UUID | sed 's/\/dev\/mapper\///'`
#  ;;
#esac
ROOT_LUKS=cryptroot
crypttab_find_entry $ROOT_LUKS
ROOT_DEV=$CRYPTTAB_SOURCE

case $ROOT_DEV in
UUID=*)
  UUID=`echo $ROOT_DEV | cut -f2 -d '='`
  ROOT_DEV_FULL="/dev/disk/by-uuid/$UUID"
  ;;
LABEL=*)
  LABEL=`echo $ROOT_DEV | cut -f2 -d '='`
  ROOT_DEV_FULL="/dev/disk/by-label/$LABEL"
  ;;
PARTLABEL=*)
  PARTLABEL=`echo $ROOT_DEV | cut -f2 -d '='`
  ROOT_DEV_FULL="/dev/disk/by-partlabel/$PARTLABEL"
  ;;
PARTUUID=*)
  PARTUUID=`echo $ROOT_DEV | cut -f2 -d '='`
  ROOT_DEV_FULL="/dev/disk/by-uuid/$PARTUUID"
  ;;
*)
  ROOT_DEV_FULL=$ROOT_DEV
  ;;
esac

if [ ! -e "$ROOT_DEV_FULL" ]; then
  echo No valid root device found! Aborting!
  exit 1
fi

if dpkg-query -l 'scdaemon' | egrep -q '^ii'; then
  echo "scdaemon installed"
else
  echo "ERROR: scdaemon package not installed. The scdaemon package is required to access the OpenPGP smart card"
  exit 1
fi
  
chmod 700 $GNUPGHOME
# create cryptfs GPG home dir
gpg --homedir ${GNUPGHOME} --card-status
if [ $? -ne 0 ]; then
  echo Insert your OpenPGP smart card and press Enter
  read _
  gpg --homedir ${GNUPGHOME} --card-status || exit 1
fi

gpg --homedir ${GNUPGHOME} --import $PUBKEY
gpg --homedir ${GNUPGHOME} --export --export-options export-minimal > ${CRYPTHOME}/pubring.gpg
GPG_RECIPIENT=`gpg --homedir="$GNUPGHOME" --with-colons --list-keys \
    | sed -nr 's/^pub(:[^:]*){3}:([0-9a-fA-F]+)(:[^:]*){6}:[^:]*[eE].*/-r \2/p'`

if [ "$GPG_RECIPIENT" = "" ]; then
  echo "ERROR: No GPG keys found in keyring"
  exit 1
fi

# Generate the LUKS key if it doesn't exist
if [ -e "${CRYPTHOME}/cryptkey.gpg" ]; then
  echo "${CRYPTHOME}/cryptkey.gpg exists, skipping key generation"
else
# generate secret key
  dd if=/dev/random bs=1 count=256 >${TMPKEY}
  gpg --homedir ${GNUPGHOME} --trust-model=always -o ${CRYPTHOME}/cryptkey.gpg $GPG_RECIPIENT --yes --encrypt ${TMPKEY}
  if [ $? -ne 0 ]; then
    echo "Encryption of ${CRYPTHOME}/cryptkey.gpg failed! Aborting!"
    shred -u ${TMPKEY}
    shred -u ${CRYPTHOME}/cryptkey.gpg
    exit 1
  fi
  
  # test decryption
  GNUPGHOME=$GNUPGHOME /lib/cryptsetup/scripts/decrypt_gnupg-sc ${CRYPTHOME}/cryptkey.gpg > /dev/null
  
  if [ $? -ne 0 ]; then
    echo "Decryption test for ${CRYPTHOME}/cryptkey.gpg failed! Aborting!"
    shred -u ${TMPKEY}
    shred -u ${CRYPTHOME}/cryptkey.gpg
    exit 1
  fi
  
  echo -e "\n\nAdding your new secret key to LUKS.\nWhen prompted, type in your OLD passphrase to unlock the disk."
  cryptsetup luksAddKey $ROOT_DEV_FULL ${TMPKEY}
  if [ $? -ne 0 ]; then
    echo "Adding new key to LUKS failed! Aborting!"
    shred -u ${TMPKEY}
    shred -u ${CRYPTHOME}/cryptkey.gpg
    exit 1
  fi
  shred -u ${TMPKEY}
fi

crypttab_find_entry $ROOT_LUKS
if [ "${CRYPTHOME}/cryptkey.gpg" = "$CRYPTTAB_KEY" ]; then
  echo "/etc/crypttab already updated, skipping"
else
  cat /etc/crypttab | sed "s|^$ROOT_LUKS .*|$ROOT_LUKS $ROOT_DEV ${CRYPTHOME}/cryptkey.gpg ${CRYPTTAB_OPTIONS},keyscript=decrypt_gnupg-sc|" > /etc/crypttab.tmp
  mv /etc/crypttab.tmp /etc/crypttab
fi

update-initramfs -u

# patch grub config files
#perl -pi -e 's/^GRUB_CMDLINE_LINUX_DEFAULT=(.*) splash/GRUB_CMDLINE_LINUX_DEFAULT=\1 nosplash noresume loglevel=3/' /etc/default/grub
#echo "GRUB_CMDLINE_LINUX_RECOVERY=\"cryptopts=target=$ROOT_LUKS,source=$ROOT_DEV,luks\"" >> /etc/default/grub

# temporary script patches until they are upstreamed
#perl -pi -e 's/GRUB_CMDLINE_LINUX_RECOVERY=recovery/GRUB_CMDLINE_LINUX_RECOVERY=\"\$GRUB_CMDLINE_LINUX_RECOVERY recovery\"/' /etc/grub.d/10_linux
#perl -pi -e 's/GRUB_CMDLINE_LINUX_RECOVERY=single/GRUB_CMDLINE_LINUX_RECOVERY=\"\$GRUB_CMDLINE_LINUX_RECOVERY single\"/' /etc/grub.d/10_linux
#perl -pi -e 's/GRUB_CMDLINE_LINUX_DEFAULT \\/GRUB_CMDLINE_LINUX_DEFAULT \\\n  GRUB_CMDLINE_LINUX_RECOVERY \\/' /usr/sbin/grub-mkconfig

#update-grub
